package assignments.newassignments.pages;

package pages;

import org.openqa.selenium.By;

import org.openqa.selenium.WebDriver;

public class login {

    WebDriver driver;

    By user99GuruName = By.name("uid");

    By password99Guru = By.name("password");

    By titleText =By.className("barone");

    By login = By.name("btnLogin");

    public login(WebDriver driver){

        this.driver = driver;

    }

    //Set user name in textbox

    public void setUserName(String strUserName){

        driver.findElement(user99GuruName).sendKeys(strUserName);

    }

    //Set password in password textbox

    public void setPassword(String strPassword){

         driver.findElement(password99Guru).sendKeys(strPassword);

    }

    //Click on login button

    public void clickLogin(){

            driver.findElement(login).click();

    }

    //Get the title of Login Page

    public String getLoginTitle(){

     return    driver.findElement(titleText).getText();

    }

    /**

     * This POM method will be exposed in test case to login in the application

     * @param strUserName

     * @param strPasword

     * @return

     */

    public void loginToGuru99(String strUserName,String strPasword){

        //Fill user name

        this.setUserName(strUserName);

        //Fill password

        this.setPassword(strPasword);

        //Click Login button

        this.clickLogin();        
    }

}


package assignments.newassignments.pages;

import org.openqa.selenium.By;

import org.openqa.selenium.WebDriver;

public class HomePage {

    WebDriver driver;

    By homePageUserName = By.xpath("//table//tr[@class='heading3']");

    

    public HomePage(WebDriver driver){

        this.driver = driver;

    }

    //Get the User name from Home Page

        public String getHomePageDashboardUserName(){

         return    driver.findElement(homePageUserName).getText();

        }

}

package assignments.newassignments.pages;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;

import org.openqa.selenium.firefox.FirefoxDriver;

import org.testng.Assert;

import org.testng.annotations.BeforeTest;

import org.testng.annotations.Test;


public class TestLogin {

    String driverPath = "C:\\geckodriver.exe";
    
    WebDriver driver;

    login objLogin;

    HomePage objHomePage;

    @BeforeTest

    public void setup(){

	System.setProperty("webdriver.gecko.driver", driverPath);
        
        driver = new FirefoxDriver();

        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        driver.get("http://demo.guru99.com/V4/");

    }

    /**

     * This test case will login in http://demo.guru99.com/V4/

     * Verify login page title as guru99 bank

     * Login to application

     * Verify the home page using Dashboard message

     */

    @Test(priority=0)

    public void test_Home_Page_Appear_Correct(){

        //Create Login Page object

    objLogin = new  login(driver);

    //Verify login page title

    String loginPageTitle = objLogin.getLoginTitle();

    Assert.assertTrue(loginPageTitle.toLowerCase().contains("guru99 bank"));

    //login to application

    objLogin.loginToGuru99("mgr123", "mgr!23");

    // go the next page

    objHomePage = new  HomePage(driver);

    //Verify home page

    Assert.assertTrue(objHomePage.getHomePageDashboardUserName().toLowerCase().contains("manger id : mgr123"));

    }
}package assignments.newassignments.pagefactory_POM;

import org.openqa.selenium.WebDriver;

import org.openqa.selenium.WebElement;

import org.openqa.selenium.support.FindBy;

import org.openqa.selenium.support.PageFactory;

public class Guru99Login {

    /**

     * All WebElements are identified by @FindBy annotation

     */

    WebDriver driver;

    @FindBy(name="uid")

    WebElement user99GuruName;

    @FindBy(name="password")

    WebElement password99Guru;    

    @FindBy(className="barone")

    WebElement titleText;

    @FindBy(name="btnLogin")

    WebElement login;

    public Guru99Login(WebDriver driver){

        this.driver = driver;

        //This initElements method will create all WebElements

        PageFactory.initElements(driver, this);

    }

    //Set user name in textbox

    public void setUserName(String strUserName){

        user99GuruName.sendKeys(strUserName);     
    }

    //Set password in password textbox

    public void setPassword(String strPassword){

    password99Guru.sendKeys(strPassword);

    }

    //Click on login button

    public void clickLogin(){

            login.click();

    }  

    //Get the title of Login Page

    public String getLoginTitle(){

     return    titleText.getText();

    }

    /**

     * This POM method will be exposed in test case to login in the application

     * @param strUserName

     * @param strPasword

     * @return

     */

    public void loginToGuru99(String strUserName,String strPasword){

        //Fill user name

        this.setUserName(strUserName);

        //Fill password

        this.setPassword(strPasword);

        //Click Login button

        this.clickLogin();           

    }

}



package assignments.newassignments.pagefactory_POM;

import org.openqa.selenium.WebDriver;

import org.openqa.selenium.WebElement;

import org.openqa.selenium.support.FindBy;

import org.openqa.selenium.support.PageFactory;

public class Guru99HomePage {

    WebDriver driver;

    @FindBy(xpath="//table//tr[@class='heading3']")

    WebElement homePageUserName;    

    public Guru99HomePage(WebDriver driver){

        this.driver = driver;

        //This initElements method will create all WebElements

        PageFactory.initElements(driver, this);

    }   

    //Get the User name from Home Page

        public String getHomePageDashboardUserName(){

         return    homePageUserName.getText();

        }

}

package assignments.newassignments.pagefactory_POM;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;

import org.openqa.selenium.firefox.FirefoxDriver;

import org.testng.Assert;

import org.testng.annotations.BeforeTest;

import org.testng.annotations.Test;



public class Test99GuruLoginWithPageFactory2 {

    String driverPath = "C:\\geckodriver.exe";
    
    WebDriver driver;

    Guru99Login objLogin;

    Guru99HomePage objHomePage; 

 
    @Test(priority=1)
    public void testLoginWithValidCredentials(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "mgr!23");
        objHomePage = new Guru99HomePage(driver);
        Assert.assertTrue(objHomePage.getHomePageDashboardUserName().toLowerCase().contains("manger id : mgr123"));
    }

    
    @Test(priority=2)
    public void testLoginWithInvalidCredentials(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("invalidUser", "invalidPassword");
        Assert.assertTrue(objLogin.getLoginTitle().toLowerCase().contains("guru99 bank"));
    }
    @Test(priority=3)
    public void testLoginWithEmptyPassword(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "");
        Assert.assertTrue(objLogin.getLoginTitle().toLowerCase().contains("guru99 bank"));
    }
    @Test(priority=4)
    public void testLoginWithEmptyUsername(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("", "mgr!23");
        Assert.assertTrue(objLogin.getLoginTitle().toLowerCase().contains("guru99 bank"));
    }
    @Test(priority=5)
    public void testLogout(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "mgr!23");
        objHomePage = new Guru99HomePage(driver);
        Assert.assertTrue(objHomePage.getHomePageDashboardUserName().toLowerCase().contains("manger id : mgr123"));
        // Add code for logout here
        // Verify that the user is logged out and on the login page
    }


}


package assignments.newassignments.pagefactory_POM;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;

import org.openqa.selenium.firefox.FirefoxDriver;

import org.testng.Assert;

import org.testng.annotations.BeforeTest;

import org.testng.annotations.Test;



public class Test99GuruLoginWithPageFactory2 {

    String driverPath = "C:\\geckodriver.exe";
    
    WebDriver driver;

    Guru99Login objLogin;

    Guru99HomePage objHomePage; 

 
    @Test(priority=1)
    public void testLoginWithValidCredentials(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "mgr!23");
        objHomePage = new Guru99HomePage(driver);
        Assert.assertTrue(objHomePage.getHomePageDashboardUserName().toLowerCase().contains("manger id : mgr123"));
    }

    
    @Test(priority=2)
    public void testLoginWithInvalidCredentials(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("invalidUser", "invalidPassword");
        Assert.assertTrue(objLogin.getLoginTitle().toLowerCase().contains("guru99 bank"));
    }
    @Test(priority=3)
    public void testLoginWithEmptyPassword(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "");
        Assert.assertTrue(objLogin.getLoginTitle().toLowerCase().contains("guru99 bank"));
    }
    @Test(priority=4)
    public void testLoginWithEmptyUsername(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("", "mgr!23");
        Assert.assertTrue(objLogin.getLoginTitle().toLowerCase().contains("guru99 bank"));
    }
    @Test(priority=5)
    public void testLogout(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "mgr!23");
        objHomePage = new Guru99HomePage(driver);
        Assert.assertTrue(objHomePage.getHomePageDashboardUserName().toLowerCase().contains("manger id : mgr123"));
        // Add code for logout here
        // Verify that the user is logged out and on the login page
    }
    @Test(priority=6)
    public void testLoginWithSpecialCharacters(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr@123", "mgr!23@#");
        objHomePage = new Guru99HomePage(driver);
        Assert.assertTrue(objHomePage.getHomePageDashboardUserName().toLowerCase().contains("manger id : mgr123"));
    }
    @Test(priority=7)
    public void testLoginWithUppercaseCredentials(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("MGR123", "MGR!23");
        objHomePage = new Guru99HomePage(driver);
        Assert.assertTrue(objHomePage.getHomePageDashboardUserName().toLowerCase().contains("manger id : mgr123"));
    }
    @Test(priority=8)
    public void testLoginWithRememberMe(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "mgr!23");
        // Add code to enable "Remember Me" option
        // Verify that the next login automatically logs in the user
    }
    @Test(priority=9)
    public void testPasswordResetRequest(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "invalidPassword");
        // Add code to request a password reset
        // Verify that a reset email is sent to the user
    }

    
    @Test(priority=10)
    public void testLoginWithLongCredentials(){
        objLogin = new Guru99Login(driver);
        // Create a long username and password
        String longUsername = "verylongusername1234567890";
        String longPassword = "longpassword1234567890";
        objLogin.loginToGuru99(longUsername, longPassword);
        objHomePage = new Guru99HomePage(driver);
        Assert.assertTrue(objHomePage.getHomePageDashboardUserName().toLowerCase().contains("manger id : mgr123"));
    }

    
    @Test(priority=11)
    public void testLoginWithCAPTCHA(){
        objLogin = new Guru99Login(driver);
        // Add code to handle CAPTCHA verification
        // Verify that the login is successful with the correct CAPTCHA input
    }
    @Test(priority=12)
    public void testLoginWithLockedAccount(){
        objLogin = new Guru99Login(driver);
        // Lock the user account
        // Attempt to login with the locked account
        // Verify that the login is unsuccessful
    }
    @Test(priority=13)
    public void testPasswordChange(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "mgr!23");
        // Add code to change the password
        // Verify that the password change is successful
    }

    @Test(priority=14)
    public void testAccessDeniedPage(){
        objLogin = new Guru99Login(driver);
        objLogin.loginToGuru99("mgr123", "mgr!23");
        // Add code to attempt to access an unauthorized page
        // Verify that the user is redirected to the "Access Denied" page
    }


}


//////////////////////////////////////////////////////////////////////////////////////\
package assignments.newassignments.pagefactory_POM.softwaretestinghelp.library;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;

public class Browser {

    static WebDriver driver;

    public static WebDriver startBrowser(String browserName, String driverPath, String url) {
        if (browserName.equalsIgnoreCase("Firefox")) {
            System.setProperty("webdriver.gecko.driver", driverPath);
            driver = new FirefoxDriver();
        } else if (browserName.equalsIgnoreCase("Chrome")) {
            System.setProperty("webdriver.chrome.driver", driverPath);
            driver = new ChromeDriver();
        } else if (browserName.equalsIgnoreCase("IE")) {
            System.setProperty("webdriver.ie.driver", driverPath);
            driver = new InternetExplorerDriver();
        }

        driver.manage().window().maximize();
        driver.get(url);
        return driver;
    }
}
package assignments.newassignments.pagefactory_POM.softwaretestinghelp.library;

import java.io.File;
 
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;

import com.google.common.io.Files;

public class ScreenShot {

    public static void captureScreenShot(WebDriver driver, String screenShotName) {
        try {
            File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            File destination = new File("E://Selenium//" + screenShotName + ".jpg");
            Files.copy(screenshot, destination);

            // Add assertions
            boolean isFileExists = destination.exists();
            boolean isFileNotEmpty = destination.length() > 0;

            // Assert that the screenshot file exists and is not empty
            Assert.assertTrue(isFileExists, "Screenshot file should exist.");
            Assert.assertTrue(isFileNotEmpty, "Screenshot file should not be empty.");

            // Print assertion details
            if (isFileExists) {
                System.out.println("Screenshot file exists: " + destination.getAbsolutePath());
            }
            if (isFileNotEmpty) {
                System.out.println("Screenshot file is not empty.");
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}


package assignments.newassignments.pagefactory_POM.softwaretestinghelp.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;

public class HomePage {

    WebDriver driver;

    By logout = By.id("p_lt_ctl03_wSOB_btnSignOutLink");
    By home = By.id("p_lt_ctl02_wCU2_lblLabel");

    // Constructor to initialize object
    public HomePage(WebDriver dr) {
        this.driver = dr;
    }

    public void verifyHomePage() {
        String homeText = driver.findElement(home).getText();

        // Assertion: Verify that the home page label is displayed
        Assert.assertTrue(!homeText.isEmpty(), "Home page label should be displayed.");

        // Print assertion details
        System.out.println("Home page label is displayed: " + homeText);
    }

    public void logout() {
        driver.findElement(logout).click();

        // Assertion: Verify that the logout button click was successful
        Assert.assertTrue(driver.getCurrentUrl().contains("logout"), "Logout action should redirect to the logout page.");

        // Print assertion details
        System.out.println("Logout action successful.");
    }
}


package assignments.newassignments.pagefactory_POM.softwaretestinghelp.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;

public class LoginPage {
    WebDriver driver;

    By UserID = By.xpath("//*[contains(@id,'Login1_UserName')]");
    By password = By.xpath("//*[contains(@id,'Login1_Password')]");
    By Submit = By.xpath("//*[contains(@id,'Login1_LoginButton')]");

    public LoginPage(WebDriver driver) {
        this.driver = driver;
    }

    public void loginToSite(String Username, String Password) {
        enterUsername(Username);
        enterPassword(Password);
        clickSubmit();
    }

    public void enterUsername(String Username) {
        driver.findElement(UserID).sendKeys(Username);

        Assert.assertEquals(driver.findElement(UserID).getAttribute("value"), Username, "Username should be entered.");
        System.out.println("Username entered: " + Username);
    }

    public void enterPassword(String Password) {
        driver.findElement(password).sendKeys(Password);

        Assert.assertEquals(driver.findElement(password).getAttribute("value"), Password, "Password should be entered.");
        System.out.println("Password entered: " + Password);
    }

    public void clickSubmit() {
        driver.findElement(Submit).click();

 
        System.out.println("Submit button clicked.");
    }
}


package assignments.newassignments.pagefactory_POM.softwaretestinghelp.testcases;

import java.util.concurrent.TimeUnit;
 
import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import assignments.newassignments.pagefactory_POM.softwaretestinghelp.library.Browser;
import assignments.newassignments.pagefactory_POM.softwaretestinghelp.library.ScreenShot;
import assignments.newassignments.pagefactory_POM.softwaretestinghelp.pages.HomePage;
import assignments.newassignments.pagefactory_POM.softwaretestinghelp.pages.LoginPage;
 

public class LoginTestCase {

    WebDriver driver;
    LoginPage lp;
    HomePage hp;
    int i = 0;

    @BeforeTest
    public void browserLaunch() {
        driver = Browser.startBrowser("Chrome", "http://demostore.kenticolab.com/Special-Pages/Logon.aspx", null);
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
        lp = new LoginPage(driver);
        hp = new HomePage(driver);
    }

    @Test(priority = 1)
    public void login() {
        lp.loginToSite("gaurav.3n@gmail.com", "Test@123");

        // Assertion: Verify that the login is successful
        Assert.assertTrue(driver.getCurrentUrl().contains("Logged-On-Home"), "Login should be successful.");
        System.out.println("Login successful.");
    }

    @Test(priority = 2)
    public void homePageVerify() {
        String homeText = hp.pageverify();

        // Assertion: Verify that the home page label is displayed
        Assert.assertTrue(homeText.contains("Logged on as"), "Home page label should be displayed.");
        System.out.println("Home page label displayed: " + homeText);
    }

    @Test(priority = 3)
    public void logout() {
        hp.logout();

        // Assertion: Verify that the logout is successful
        Assert.assertTrue(driver.getCurrentUrl().contains("Logon"), "Logout should be successful.");
        System.out.println("Logout successful.");
    }

    @AfterMethod
    public void screenshot(ITestResult result) {
        i = i + 1;
        String name = "ScreenShot";
        String x = name + String.valueOf(i);
        if (ITestResult.FAILURE == result.getStatus()) {
            ScreenShot.captureScreenShot(driver, x);
        }
    }

    @AfterTest
    public void closeBrowser() {
        driver.close();
    }
}


package assignments.newassignments.pagefactory_POM.softwaretestinghelp.testcases;

import java.io.IOException; 
import java.util.concurrent.TimeUnit; 
import org.openqa.selenium.WebDriver; 
import org.openqa.selenium.chrome.ChromeDriver; 
import org.testng.annotations.AfterSuite; 
import org.testng.annotations.BeforeSuite; 
  
public class TestBase { 
  
    public static WebDriver driver = null; 
  
    @BeforeSuite
    public void initialize() throws IOException { 
  
        System.setProperty("webdriver.chrome.driver", 
        System.getProperty("user.dir") +  
            "\\src\\test\\java\\drivers\\chromedriver.exe"); 
    
        driver = new ChromeDriver(); 
    
        // To maximize browser 
        driver.manage().window().maximize(); 
    
        // Implicit wait 
        driver.manage().timeouts().implicitlyWait( 
             10, TimeUnit.SECONDS); 
    
        // To open Gmail site 
        driver.get("https:// www.gmail.com"); 
    } 
  
    @AfterSuite
    // Test cleanup 
    public void TeardownTest() { 
        TestBase.driver.quit(); 
    } 
} 

package assignments.newassignments.pagefactory_POM.softwaretestinghelp.pages;

import org.openqa.selenium.WebDriver; 
import org.openqa.selenium.WebElement; 
import org.openqa.selenium.support.FindBy; 
import org.openqa.selenium.support.How; 
  
public class GmailLoginPage { 
  
    WebDriver driver; 
  
    public GmailLoginPage(WebDriver driver) { 
        this.driver = driver; 
    } 
  
    // Using FindBy for locating elements 
    @FindBy(how = How.XPATH, using =  
            "// input[@type='email']]") 
    WebElement emailTextBox; 
  
    @FindBy(how = How.XPATH, using =  
            "// input[@type='password']") 
      
    WebElement passwordTextBox; 
    @FindBy(how = How.XPATH, using ="// input[@type='email']]")
    WebElement nextButton; 
  
    // Defining all the user actions (Methods) 
    //that can be performed in the Facebook home page 
  
    // This method is to set Email in the email text box 
    public void setEmail(String strEmail) { 
            emailTextBox.sendKeys(strEmail); 
        } 
        // This method is to set Password in the password text box 
    public void setPassword(String strPassword) { 
            passwordTextBox.sendKeys(strPassword); 
        } 
        // This method is to click on Next Button 
    public void clickOnNextButton() { 
        nextButton.click(); 
    } 
} 

package assignments.newassignments.pagefactory_POM.softwaretestinghelp.testcases;

import org.openqa.selenium.support.PageFactory; 
import org.testng.annotations.Test;

import assignments.newassignments.pagefactory_POM.softwaretestinghelp.pages.GmailLoginPage; 

  
public class GmailLoginTest extends TestBase { 
  
    @Test
    public void init() throws Exception { 
  
        // driver.get("https:// www.gmail.com"); 
        GmailLoginPage loginpage =  
           PageFactory.initElements(driver, 
           GmailLoginPage.class); 
    
        loginpage.setEmail("abc@gmail.com"); 
        loginpage.clickOnNextButton(); 
        loginpage.setPassword("23456@qwe"); 
        loginpage.clickOnNextButton(); 
    } 
} 


///////////////////////////////////////////////////////////////////////////////////////
package assignments.newassignments.pagefactory_POM;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class PracticePage {

    private WebDriver driver;

    @FindBy(css = "input#checkBoxOption1")
    private WebElement checkBoxOption1;

    public PracticePage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

    public void clickCheckBoxOption1() {
        checkBoxOption1.click();
    }

    public boolean isCheckBoxOption1Selected() {
        return checkBoxOption1.isSelected();
    }
}
package assignments.newassignments.pagefactory_POM;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class TestAssignment1 {

    private WebDriver driver;
    private PracticePage practicePage;

    @BeforeTest
    public void setup() {
        System.setProperty("webdriver.chrome.driver", "C:/Users/amrbhat/chromedriver.exe");
        driver = new ChromeDriver();
        driver.get("https://rahulshettyacademy.com/AutomationPractice/");
        practicePage = new PracticePage(driver);
    }

    @Test
    public void testCheckBoxOption1() {
        practicePage.clickCheckBoxOption1();

        // Assertion: Verify that the checkbox is selected after clicking
        Assert.assertTrue(practicePage.isCheckBoxOption1Selected());

        // Sleep for 2 seconds (not recommended for real tests, just for demonstration)
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        practicePage.clickCheckBoxOption1();

        // Assertion: Verify that the checkbox is deselected after clicking again
        Assert.assertFalse(practicePage.isCheckBoxOption1Selected());
    }

    @AfterTest
    public void tearDown() {
        driver.quit();
    }
}

package assignments.newassignments.pagefactory_POM;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;

public class PracticePage2 {

    private WebDriver driver;

    @FindBy(id = "exampleFormControlSelect1")
    private WebElement staticDropdown;

    @FindBy(name = "name")
    private WebElement nameInput;

    @FindBy(name = "email")
    private WebElement emailInput;

    @FindBy(css = "input[placeholder*='Password']")
    private WebElement passwordInput;

    @FindBy(css = "input[id*='exampleCheck1']")
    private WebElement checkBox;

    @FindBy(id = "inlineRadio1")
    private WebElement radioButton;

    @FindBy(css = "input[name*='bday']")
    private WebElement dateInput;

    @FindBy(css = "input[value*='Submit']")
    private WebElement submitButton;

    @FindBy(css = ".btn-success")
    private WebElement successButton;

    @FindBy(css = ".alert-success")
    private WebElement successAlert;

    public PracticePage2(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

    public void selectStaticDropdownByIndex(int index) {
        Select dropdown = new Select(staticDropdown);
        dropdown.selectByIndex(index);
    }

    public void enterName(String name) {
        nameInput.sendKeys(name);
    }

    public void enterEmail(String email) {
        emailInput.sendKeys(email);
    }

    public void enterPassword(String password) {
        passwordInput.sendKeys(password);
    }

    public void clickCheckBox() {
        checkBox.click();
    }

    public void clickRadioButton() {
        radioButton.click();
    }

    public void enterDate(String date) {
        dateInput.sendKeys(date);
    }

    public void clickSubmitButton() {
        submitButton.click();
    }

    public void clickSuccessButton() {
        successButton.click();
    }

    public String getSuccessAlertText() {
        return successAlert.getText();
    }
}
package assignments.newassignments.pagefactory_POM;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class TestAssignment2 {

    private WebDriver driver;
    private PracticePage2 practicePage;

    @BeforeTest
    public void setup() {
        System.setProperty("webdriver.chrome.driver", "C:/Users/amrbhat/chromedriver.exe");
        driver = new ChromeDriver();
        driver.get("https://rahulshettyacademy.com/angularpractice/");
        practicePage = new PracticePage2(driver);
    }

    @Test
    public void testAssignment2() {
        practicePage.selectStaticDropdownByIndex(0);
        practicePage.enterName("amruth");
        practicePage.enterEmail("amruth@gmail.com");
        practicePage.enterPassword("pwd");
        practicePage.clickCheckBox();
        practicePage.clickRadioButton();
        practicePage.enterDate("3000-12-31");
        practicePage.clickSubmitButton();

        // Sleep for 3 seconds (not recommended for real tests, just for demonstration)
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        practicePage.clickSuccessButton();

        // Assertion: Verify the success message
        Assert.assertEquals(practicePage.getSuccessAlertText(), "Success!", "Success message should match.");
    }

    @AfterTest
    public void tearDown() {
        driver.quit();
    }
}



package assignments.newassignments.pagefactory_POM;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class LoginPage {

    private WebDriver driver;

    @FindBy(name = "username")
    private WebElement usernameInput;

    @FindBy(id = "password")
    private WebElement passwordInput;

    @FindBy(css = ".customradio:nth-child(2)")
    private WebElement radioCustom;

    @FindBy(id = "okayBtn")
    private WebElement okayButton;

    @FindBy(xpath = "//select[@class='form-control']")
    private WebElement selectRoleDropdown;

    @FindBy(id = "signInBtn")
    private WebElement signInButton;

    public LoginPage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

    public void login(String username, String password) {
        usernameInput.sendKeys(username);
        passwordInput.sendKeys(password);
        radioCustom.click();
        okayButton.click();
        // You can add more waiting logic here, if necessary
        selectRoleDropdown.sendKeys("consult");
        signInButton.click();
    }
}
package assignments.newassignments.pagefactory_POM;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import java.util.List;

public class ProductPage {

    private WebDriver driver;

    @FindBy(partialLinkText = "Checkout")
    private WebElement checkoutLink;

    @FindBy(css = ".card-footer .btn-info")
    private List<WebElement> productButtons;

    public ProductPage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

    public void selectProducts() {
        for (WebElement productButton : productButtons) {
            productButton.click();
        }
    }

    public void goToCheckout() {
        checkoutLink.click();
    }
}
package assignments.newassignments.pagefactory_POM;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class TestAssignment3 {

    private WebDriver driver;
    private LoginPage loginPage;
    private ProductPage productPage;

    @BeforeTest
    public void setup() {
        System.setProperty("webdriver.chrome.driver", "C:/Users/amrbhat/chromedriver.exe");
        driver = new ChromeDriver();
        driver.get("https://rahulshettyacademy.com/loginpagePractise/");
        loginPage = new LoginPage(driver);
        productPage = new ProductPage(driver);
    }

    @Test
    public void testAssignment3() {
        loginPage.login("rahulshettyacademy", "learning");
        productPage.selectProducts();
        productPage.goToCheckout();
    }

    @AfterTest
    public void tearDown() {
        driver.quit();
    }
}


package assignments.newassignments.pagefactory_POM;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Test;

public class TestAssignment3 {

    WebDriver driver;

    @Test
    public void testAssignment3() {
        // Initialize your WebDriver and navigate to the website
    	WebDriver driver = new ChromeDriver(); // Initialize a Chrome WebDriver instance

        WebDriverWait w = new WebDriverWait(driver, Duration.ofSeconds(5));
        String[] itemNeeded = {"iphone X", "Samsung Note 8", "Nokia Edge", "Blackberry"};

        driver.get("https://rahulshettyacademy.com/loginpagePractise/");

        driver.findElement(By.name("username")).sendKeys("rahulshettyacademy");
        driver.findElement(By.id("password")).sendKeys("learning");
        driver.findElement(By.cssSelector(".customradio:nth-child(2)")).click();

        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(7));
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("okayBtn"))).click();

        // Rest of your code for handling the dropdown, products, and checkout
    }
}


package introductions.testing;

 

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class WindowsPage {
    private WebDriver driver;

    @FindBy(css = "a[href='/windows']")
    private WebElement windowsLink;

    @FindBy(css = "div h3")
    private WebElement header;

    public WindowsPage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

    public void clickWindowsLink() {
        windowsLink.click();
    }

    public String getWindowHeaderText() {
        return header.getText();
    }
}

package assignments.newassignments.pagefactory_POM;

 
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
 

public class TestAssignment4 {
    private WebDriver driver;

    @BeforeTest
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "C:/Users/amrbhat/chromedriver.exe");
        driver = new ChromeDriver();
        driver.get("https://the-internet.herokuapp.com/");
    }

    @Test
    public void testAssignment4() {
        WindowsPage windowsPage = new WindowsPage(driver);

        windowsPage.clickWindowsLink();
        String childText = windowsPage.getWindowHeaderText();
        System.out.println(childText);

        // Add your assertions here
    }

    @AfterTest
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
}
package assignments.newassignments.pagefactory_POM;


import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class WindowsPage {
    private WebDriver driver;

    @FindBy(css = "a[href='/windows']")
    private WebElement windowsLink;

    @FindBy(css = "div h3")
    private WebElement header;

    public WindowsPage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

    public void clickWindowsLink() {
        windowsLink.click();
    }

    public String getWindowHeaderText() {
        return header.getText();
    }
}
