package JavaIntermediate4;

import java.util.*;

public class CollectionExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // List Example
        List<String> stringList = new ArrayList<>();
        System.out.print("Enter strings for the list (comma-separated): ");
        String[] listInput = scanner.nextLine().split(",");
        stringList.addAll(Arrays.asList(listInput));
        System.out.println("List: " + stringList);

        // Set Example
        Set<Integer> integerSet = new HashSet<>();
        System.out.print("Enter integers for the set (space-separated): ");
        Integer[] setInput = Arrays.stream(scanner.nextLine().split("\\s+"))
                .map(Integer::parseInt)
                .toArray(Integer[]::new);
        integerSet.addAll(Arrays.asList(setInput));
        System.out.println("Set: " + integerSet);

        // Map Example
        Map<String, Integer> stringIntegerMap = new HashMap<>();
        System.out.print("Enter key-value pairs for the map (comma-separated, key=value): ");
        String[] mapInput = scanner.nextLine().split(",");
        for (String entry : mapInput) {
            String[] keyValue = entry.split("=");
            if (keyValue.length == 2) {
                stringIntegerMap.put(keyValue[0], Integer.parseInt(keyValue[1]));
            }
        }
        System.out.println("Map: " + stringIntegerMap);

        // Queue Example
        Queue<String> stringQueue = new LinkedList<>();
        System.out.print("Enter strings for the queue (space-separated): ");
        String[] queueInput = scanner.nextLine().split("\\s+");
        stringQueue.addAll(Arrays.asList(queueInput));
        System.out.println("Queue: " + stringQueue);

        scanner.close();
    }
}

package JavaIntermediate4;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

class Person {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public int getAge() {
        return age;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}

public class ComparatorChainProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input for the number of persons
        System.out.print("Enter the number of persons: ");
        int numPersons = scanner.nextInt();

        // Input for the persons
        List<Person> persons = new ArrayList<>();
        System.out.println("Enter the details for each person:");
        for (int i = 0; i < numPersons; i++) {
            System.out.print("Name: ");
            String name = scanner.next();
            System.out.print("Age: ");
            int age = scanner.nextInt();
            persons.add(new Person(name, age));
        }

        // Sort the list using a chain of comparators
        Collections.sort(persons, Comparator.comparingInt(Person::getAge).thenComparing(Person::getName));

        // Display the sorted list
        System.out.println("Sorted Persons:");
        for (Person person : persons) {
            System.out.println(person);
        }

        scanner.close();
    }
}
package JavaIntermediate4;

import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ComparatorChainTest {

    @Test
    public void testComparatorChain() {
        // Create a list of persons
        List<Person> persons = new ArrayList<>();
        persons.add(new Person("Alice", 25));
        persons.add(new Person("Bob", 30));
        persons.add(new Person("Charlie", 22));

        // Sort the list using a chain of comparators
        Collections.sort(persons, Comparator.comparingInt(Person::getAge).thenComparing(Person::getName));

        // Assertions
        Assert.assertEquals(persons.get(0).getName(), "Charlie");
        Assert.assertEquals(persons.get(1).getName(), "Alice");
        Assert.assertEquals(persons.get(2).getName(), "Bob");
    }
}
package JavaIntermediate4;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

class Employee {
    String name;
    int employeeId;

    public Employee(String name, int employeeId) {
        this.name = name;
        this.employeeId = employeeId;
    }

    public String getName() {
        return name;
    }

    public int getEmployeeId() {
        return employeeId;
    }

    @Override
    public String toString() {
        return "Employee{" +
                "name='" + name + '\'' +
                ", employeeId=" + employeeId +
                '}';
    }
}

class Manager extends Employee {
    String department;

    public Manager(String name, int employeeId, String department) {
        super(name, employeeId);
        this.department = department;
    }

    public String getDepartment() {
        return department;
    }

    @Override
    public String toString() {
        return "Manager{" +
                "name='" + getName() + '\'' +
                ", employeeId=" + getEmployeeId() +
                ", department='" + department + '\'' +
                '}';
    }
}

class Developer extends Employee {
    String programmingLanguage;

    public Developer(String name, int employeeId, String programmingLanguage) {
        super(name, employeeId);
        this.programmingLanguage = programmingLanguage;
    }

    public String getProgrammingLanguage() {
        return programmingLanguage;
    }

    @Override
    public String toString() {
        return "Developer{" +
                "name='" + getName() + '\'' +
                ", employeeId=" + getEmployeeId() +
                ", programmingLanguage='" + programmingLanguage + '\'' +
                '}';
    }
}

public class EmployeeHierarchyProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input for the number of employees
        System.out.print("Enter the number of employees: ");
        int numEmployees = scanner.nextInt();

        // Input for the employees
        List<Employee> employees = new ArrayList<>();
        System.out.println("Enter the details for each employee:");
        for (int i = 0; i < numEmployees; i++) {
            System.out.print("Name: ");
            String name = scanner.next();
            System.out.print("Employee ID: ");
            int employeeId = scanner.nextInt();
            System.out.print("Type (M for Manager, D for Developer): ");
            char type = scanner.next().charAt(0);

            if (type == 'M') {
                System.out.print("Department: ");
                String department = scanner.next();
                employees.add(new Manager(name, employeeId, department));
            } else if (type == 'D') {
                System.out.print("Programming Language: ");
                String programmingLanguage = scanner.next();
                employees.add(new Developer(name, employeeId, programmingLanguage));
            } else {
                System.out.println("Invalid employee type. Please enter M or D.");
                i--; // Re-enter details for the current employee
            }
        }

        // Sort the list using a custom comparator
        Comparator<Employee> hierarchyComparator = Comparator
                .comparing((Employee e) -> e instanceof Manager)
                .thenComparing(e -> e instanceof Developer)
                .thenComparing(Employee::getEmployeeId);

        Collections.sort(employees, hierarchyComparator);

        // Display the sorted list
        System.out.println("Sorted Employees:");
        for (Employee employee : employees) {
            System.out.println(employee);
        }

        scanner.close();
    }
}
package JavaIntermediate4;

import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.Comparator;
import java.util.List;

public class EmployeeHierarchyTest {

    @Test
    public void testEmployeeHierarchySorting() {
        // Create a list of employees
        List<Employee> employees = List.of(
                new Manager("Alice", 101, "HR"),
                new Developer("Bob", 102, "Java"),
                new Manager("Charlie", 103, "Engineering")
        );

        // Sort the list using a custom comparator
        Comparator<Employee> hierarchyComparator = Comparator
                .comparing((Employee e) -> e instanceof Manager)
                .thenComparing(e -> e instanceof Developer)
                .thenComparing(Employee::getEmployeeId);

        employees.sort(hierarchyComparator);

        // Assertions
        Assert.assertEquals(employees.get(0).getName(), "Bob");
        Assert.assertEquals(employees.get(1).getName(), "Alice");
        Assert.assertEquals(employees.get(2).getName(), "Charlie");
    }
}
package JavaIntermediate4;

import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.Comparator;
import java.util.List;

public class EmployeeHierarchyTest {

    @Test
    public void testEmployeeHierarchySorting() {
        // Create a list of employees
        List<Employee> employees = List.of(
                new Manager("Alice", 101, "HR"),
                new Developer("Bob", 102, "Java"),
                new Manager("Charlie", 103, "Engineering")
        );

        // Sort the list using a custom comparator
        Comparator<Employee> hierarchyComparator = Comparator
                .comparing((Employee e) -> e instanceof Manager)
                .thenComparing(e -> e instanceof Developer)
                .thenComparing(Employee::getEmployeeId);

        employees.sort(hierarchyComparator);

        // Assertions
        Assert.assertEquals(employees.get(0).getName(), "Bob");
        Assert.assertEquals(employees.get(1).getName(), "Alice");
        Assert.assertEquals(employees.get(2).getName(), "Charlie");
    }
}
package JavaIntermediate4;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.function.Predicate;
import java.util.stream.Collectors;

class PersonsLists {
    String name;
    int age;

    public PersonsLists(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public int getAge() {
        return age;
    }

    @Override
    public String toString() {
        return "PersonsLists{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}

public class FilteringAndSortingProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input for the number of persons
        System.out.print("Enter the number of persons: ");
        int numPersons = scanner.nextInt();

        // Input for the persons
        List<PersonsLists> personsLists = new ArrayList<>();
        System.out.println("Enter the details for each person:");
        for (int i = 0; i < numPersons; i++) {
            System.out.print("Name: ");
            String name = scanner.next();
            System.out.print("Age: ");
            int age = scanner.nextInt();
            personsLists.add(new PersonsLists(name, age));
        }

        // Input for the age criterion to filter
        System.out.print("Enter the age criterion to filter: ");
        int ageCriterion = scanner.nextInt();

        // Filter the list based on the age criterion using Predicate
        Predicate<PersonsLists> ageFilter = person -> person.getAge() >= ageCriterion;
        List<PersonsLists> filteredList = personsLists.stream().filter(ageFilter).collect(Collectors.toList());

        // Sort the filtered list using Comparator
        Comparator<PersonsLists> ageComparator = Comparator.comparingInt(PersonsLists::getAge);
        Collections.sort(filteredList, ageComparator);

        // Display the sorted and filtered list
        System.out.println("Sorted and Filtered Persons:");
        for (PersonsLists person : filteredList) {
            System.out.println(person);
        }

        scanner.close();
    }
}
package JavaIntermediate4;

 
	import org.testng.Assert;
	import org.testng.annotations.Test;

import java.util.Comparator;
import java.util.List;

	public class FilteringAndSortingTest {

	    @Test
	    public void testFilteringAndSorting() {
	        // Create a list of persons
	        List<Person> persons = List.of(
	                new Person("Alice", 25),
	                new Person("Bob", 30),
	                new Person("Charlie", 22)
	        );

	        // Filter the list based on age >= 25
	        int ageCriterion = 25;
	        List<Person> filteredList = persons.stream().filter(person -> person.getAge() >= ageCriterion).toList();

	        // Sort the filtered list by age
	        filteredList.sort(Comparator.comparingInt(Person::getAge));

	        // Assertions
	        Assert.assertEquals(filteredList.size(), 2);
	        Assert.assertEquals(filteredList.get(0).getName(), "Alice");
	        Assert.assertEquals(filteredList.get(1).getName(), "Bob");
	    }
	}
package JavaIntermediate4;

//Given a list of strings, group anagrams together.
 
import java.util.*;

public class GroupAnagrams {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> anagramGroups = new HashMap<>();

        for (String str : strs) {
            char[] charArray = str.toCharArray();
            Arrays.sort(charArray);
            String sortedStr = new String(charArray);

            anagramGroups.computeIfAbsent(sortedStr, k -> new ArrayList<>()).add(str);
        }

        return new ArrayList<>(anagramGroups.values());
    }
}package JavaIntermediate4;

import java.util.*;
import java.util.stream.Collectors;

class CategoryObject {
    String name;
    String category;

    public CategoryObject(String name, String category) {
        this.name = name;
        this.category = category;
    }

    public String getName() {
        return name;
    }

    public String getCategory() {
        return category;
    }

    @Override
    public String toString() {
        return "CategoryObject{" +
                "name='" + name + '\'' +
                ", category='" + category + '\'' +
                '}';
    }
}

public class GroupingAndCountingProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input for the number of objects
        System.out.print("Enter the number of objects: ");
        int numObjects = scanner.nextInt();

        // Input for the objects
        List<CategoryObject> categoryObjects = new ArrayList<>();
        System.out.println("Enter the details for each object:");
        for (int i = 0; i < numObjects; i++) {
            System.out.print("Name: ");
            String name = scanner.next();
            System.out.print("Category: ");
            String category = scanner.next();
            categoryObjects.add(new CategoryObject(name, category));
        }

        // Group and count objects by category
        Map<String, Long> categoryCountMap = categoryObjects.stream()
                .collect(Collectors.groupingBy(CategoryObject::getCategory, Collectors.counting()));

        // Sort the results based on the count
        List<Map.Entry<String, Long>> sortedResults = categoryCountMap.entrySet().stream()
                .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
                .collect(Collectors.toList());

        // Display the sorted results
        System.out.println("Sorted Results (Category and Count):");
        for (Map.Entry<String, Long> entry : sortedResults) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }

        scanner.close();
    }
}
package JavaIntermediate4;

import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class GroupingAndCountingTest {

    @Test
    public void testGroupingAndCounting() {
        // Create a list of CategoryObjects
        List<CategoryObject> categoryObjects = List.of(
                new CategoryObject("Object1", "CategoryA"),
                new CategoryObject("Object2", "CategoryB"),
                new CategoryObject("Object3", "CategoryA"),
                new CategoryObject("Object4", "CategoryB"),
                new CategoryObject("Object5", "CategoryA")
        );

        // Group and count objects by category
        Map<String, Long> categoryCountMap = categoryObjects.stream()
                .collect(Collectors.groupingBy(CategoryObject::getCategory, Collectors.counting()));

        // Sort the results based on the count
        List<Map.Entry<String, Long>> sortedResults = categoryCountMap.entrySet().stream()
                .sorted(Map.Entry.comparingByValue())
                .toList();

        // Assertions
        Assert.assertEquals(sortedResults.get(0).getKey(), "CategoryB");
        Assert.assertEquals(sortedResults.get(0).getValue(), Long.valueOf(2));
        Assert.assertEquals(sortedResults.get(1).getKey(), "CategoryA");
        Assert.assertEquals(sortedResults.get(1).getValue(), Long.valueOf(3));
    }
}
package JavaIntermediate4;

//Write a Java program to find the kth largest element in an array.

 
import java.util.PriorityQueue;

public class KthLargestElement {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        for (int num : nums) {
            minHeap.offer(num);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }

        return minHeap.peek();
    }
}package JavaIntermediate4;

import java.util.Arrays;

//Find the length of the longest increasing subsequence in an array.

 
public class LongestIncreasingSubsequence {
    public int lengthOfLIS(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }

        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);

        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }

        return Arrays.stream(dp).max().getAsInt();
    }
}package JavaIntermediate4;

//Given a collection of intervals, merge overlapping intervals.

 
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Interval {
    int start, end;

    public Interval(int start, int end) {
        this.start = start;
        this.end = end;
    }
}

public class MergeIntervals {
    public List<Interval> mergeIntervals(List<Interval> intervals) {
        if (intervals.isEmpty()) {
            return new ArrayList<>();
        }

        intervals.sort((a, b) -> Integer.compare(a.start, b.start));

        List<Interval> mergedIntervals = new ArrayList<>();
        Interval currentInterval = intervals.get(0);

        for (int i = 1; i < intervals.size(); i++) {
            Interval nextInterval = intervals.get(i);
            if (currentInterval.end >= nextInterval.start) {
                currentInterval.end = Math.max(currentInterval.end, nextInterval.end);
            } else {
                mergedIntervals.add(currentInterval);
                currentInterval = nextInterval;
            }
        }

        mergedIntervals.add(currentInterval);
        return mergedIntervals;
    }
}package JavaIntermediate4;

//Question:
//Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing.

 
public class MissingNumber {
    public int findMissingNumber(int[] nums) {
        int n = nums.length;
        int expectedSum = n * (n + 1) / 2;
        int actualSum = 0;

        for (int num : nums) {
            actualSum += num;
        }

        return expectedSum - actualSum;
    }
}

package JavaIntermediate4;

//Question:
//Implement a queue using two stacks.

 
import java.util.Stack;

public class QueueUsingStacks {
    private Stack<Integer> stack1 = new Stack<>();
    private Stack<Integer> stack2 = new Stack<>();

    public void enqueue(int x) {
        stack1.push(x);
    }

    public int dequeue() {
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.pop();
    }
}package JavaIntermediate4;

//Question:
//Write a Java program to reverse a singly linked list.

 
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

public class ReverseLinkedList {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;

        while (current != null) {
            ListNode nextNode = current.next;
            current.next = prev;
            prev = current;
            current = nextNode;
        }

        return prev;
    }
}package JavaIntermediate4;

//Write functions to serialize and deserialize a binary tree.

 
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

class TreeNode {
    int val;
    TreeNode left, right;

    public TreeNode(int val) {
        this.val = val;
    }
}

public class SerializeDeserializeBinaryTree {
    public String serialize(TreeNode root) {
        if (root == null) {
            return "null";
        }
        return root.val + "," + serialize(root.left) + "," + serialize(root.right);
    }

    public TreeNode deserialize(String data) {
        Queue<String> nodes = new LinkedList<>(Arrays.asList(data.split(",")));
        return buildTree(nodes);
    }

    private TreeNode buildTree(Queue<String> nodes) {
        String val = nodes.poll();
        if (val.equals("null")) {
            return null;
        }
        TreeNode node = new TreeNode(Integer.parseInt(val));
        node.left = buildTree(nodes);
        node.right = buildTree(nodes);
        return node;
    }
}package JavaIntermediate4;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamOperationsExample {
    public static void main(String[] args) {
        // Create a list of integers
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // 1. Filter even numbers
        List<Integer> evenNumbers = numbers.stream()
                .filter(n -> n % 2 == 0)
                .collect(Collectors.toList());
        System.out.println("1. Even Numbers: " + evenNumbers);

        // 2. Map each number to its square
        List<Integer> squares = numbers.stream()
                .map(n -> n * n)
                .collect(Collectors.toList());
        System.out.println("2. Squares: " + squares);

        // 3. Find the sum of all numbers
        int sum = numbers.stream()
                .reduce(0, Integer::sum);
        System.out.println("3. Sum: " + sum);

        // 4. Check if all numbers are greater than 0
        boolean allGreaterThanZero = numbers.stream()
                .allMatch(n -> n > 0);
        System.out.println("4. All greater than 0: " + allGreaterThanZero);

        // 5. Check if any number is greater than 5
        boolean anyGreaterThanFive = numbers.stream()
                .anyMatch(n -> n > 5);
        System.out.println("5. Any greater than 5: " + anyGreaterThanFive);

        // 6. Find the first square greater than 50
        int firstSquareGreaterThan50 = numbers.stream()
                .map(n -> n * n)
                .filter(square -> square > 50)
                .findFirst()
                .orElse(-1);
        System.out.println("6. First square greater than 50: " + firstSquareGreaterThan50);

        // 7. Skip the first 3 numbers and collect the rest
        List<Integer> skippedNumbers = numbers.stream()
                .skip(3)
                .collect(Collectors.toList());
        System.out.println("7. Skip the first 3 numbers: " + skippedNumbers);

        // 8. Distinct elements in the list
        List<Integer> distinctNumbers = Arrays.asList(1, 2, 3, 2, 4, 5, 4, 6, 7, 8, 7, 9, 10);
        List<Integer> distinctElements = distinctNumbers.stream()
                .distinct()
                .collect(Collectors.toList());
        System.out.println("8. Distinct Elements: " + distinctElements);

        // 9. Concatenate two lists
        List<Integer> additionalNumbers = Arrays.asList(11, 12, 13);
        List<Integer> concatenatedList = Stream.concat(numbers.stream(), additionalNumbers.stream())
                .collect(Collectors.toList());
        System.out.println("9. Concatenated List: " + concatenatedList);

        // 10. Find the average of numbers
        double average = numbers.stream()
                .mapToDouble(Integer::doubleValue)
                .average()
                .orElse(0.0);
        System.out.println("10. Average: " + average);
    }
}

package JavaIntermediate4;

import java.util.Arrays;
import java.util.List;

class Employees {
    String name;
    double salary;

    public Employees(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }

    public double getSalary() {
        return salary;
    }
}

public class TotalSalaryUsingStreams {
    public static void main(String[] args) {
        List<Employees> employees = Arrays.asList(
                new Employees("Alice", 50000),
                new Employees("Bob", 60000),
                new Employees("Charlie", 75000),
                new Employees("David", 80000)
        );

        double totalSalary = employees.stream()
                .mapToDouble(Employees::getSalary)
                .sum();

        System.out.println("Total Salary: " + totalSalary);
    }
}
package JavaIntermediate4;

//Given an array of integers, find two numbers such that they add up to a specific target.
 
import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public int[] findTwoSum(int[] nums, int target) {
        Map<Integer, Integer> numIndices = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numIndices.containsKey(complement)) {
                return new int[]{numIndices.get(complement), i};
            }
            numIndices.put(nums[i], i);
        }

        throw new IllegalArgumentException("No two sum solution");
    }
}
package JavaIntermediate4;

import java.util.*;

public class UniqueElementsProgram {

    public static <T extends Comparable<T>> List<T> removeDuplicates(List<T> inputList) {
        Set<T> uniqueSet = new LinkedHashSet<>(inputList);
        return new ArrayList<>(uniqueSet);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input for the number of elements
        System.out.print("Enter the number of elements: ");
        int numElements = scanner.nextInt();

        // Input for the elements
        List<String> elements = new ArrayList<>();
        System.out.println("Enter the elements:");
        for (int i = 0; i < numElements; i++) {
            System.out.print("Element " + (i + 1) + ": ");
            String element = scanner.next();
            elements.add(element);
        }

        // Remove duplicates while preserving order
        List<String> uniqueElements = removeDuplicates(elements);

        // Display the unique elements
        System.out.println("Unique Elements (Preserving Order):");
        for (String element : uniqueElements) {
            System.out.println(element);
        }

        scanner.close();
    }
}
package JavaIntermediate4;

import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.List;

public class UniqueElementsTest {

    @Test
    public void testRemoveDuplicates() {
        // Create a list with duplicate elements
        List<String> elements = List.of("apple", "banana", "orange", "banana", "grape", "apple");

        // Remove duplicates using the method
        List<String> uniqueElements = UniqueElementsProgram.removeDuplicates(elements);

        // Assertions
        Assert.assertEquals(uniqueElements.size(), 4);
        Assert.assertEquals(uniqueElements.get(0), "apple");
        Assert.assertEquals(uniqueElements.get(1), "banana");
        Assert.assertEquals(uniqueElements.get(2), "orange");
        Assert.assertEquals(uniqueElements.get(3), "grape");
    }
}

